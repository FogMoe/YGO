stages:
  - prepare
  - build
  - combine
  - pack
  - deploy

variables:
  GIT_DEPTH: "1"

mat_common:
  stage: prepare
  tags: 
    - linux
  script:
    # lua
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/lua-5.3.5.tar.gz | tar zfx -
    - mv lua-5.3.5/src lua
    # sqlite3
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/sqlite-autoconf-3360000.tar.gz | tar zfx -
    - mv sqlite-autoconf-3360000 sqlite3
    # freetype
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/freetype-2.10.4.tar.gz | tar zfx -
    - mv freetype-2.10.4 freetype
    # premake
    - cp -rf premake/* .;
  artifacts:
    paths:
      - lua
      - freetype
      - sqlite3

mat_irrklang:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install git
    - mkdir -p ~/.ssh; chmod 700 ~/.ssh; echo "$NANAHIRA_SSH_KEY" | base64 --decode > ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan git.mycard.moe >> ~/.ssh/known_hosts
    - git clone --depth=1 git@git.mycard.moe:nanahira/irrklang
    #- mv -f irrklang/plugins/ikpmp3 .
  artifacts:
    paths:
      - irrklang
      - ikpmp3

mat_linux:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install git wget tar
    - git clone --depth=1 https://code.mycard.moe/mycard/irrlicht irrlicht_linux
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/premake-5.0.0-alpha14-linux.tar.gz | tar zfx -
    - env PROCESSOR_COUNT=$(nproc) ./.ci/libevent-prebuild.sh
  artifacts:
    paths:
      - premake5
      - irrlicht_linux
      - libevent-stable

mat_macos_platform_x86:
  stage: prepare
  tags:
    - macos
  variables:
    PROCESSOR_COUNT: '4'
  script: ./.ci/libevent-prebuild.sh
  artifacts:
    paths:
      - libevent-stable

mat_macos_platform_m1:
  stage: prepare
  tags:
    - linux
  script:
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/libevent-m1mac.tar.gz | tar zfx -
  artifacts:
    paths:
      - libevent-stable


mat_macos_irrklang_patched:
  stage: build
  tags:
    - linux
  dependencies: []
  script:
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/libirrklang-patched-dylib.tar.gz | tar zfx -
  artifacts:
    paths:
      - libirrklang-patched.dylib

mat_macos:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install wget tar
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/premake-5.0.0-alpha14-macosx.tar.gz | tar zfx -
    - mkdir irrlicht
    - cd irrlicht
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/irrlicht-mycard-mac.tar.gz | tar zfx -
    - cd ..
  artifacts:
    paths:
      - premake5
      - irrlicht

mat_windows:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install wget tar patch p7zip-full
    # premake5.exe
    - wget https://cdn01.moecube.com/ygopro-build-materials/premake-5.0.0-alpha14-windows.zip
    - 7z x -y premake-5.0.0-alpha14-windows.zip
    # event
    - wget -O - https://cdn01.moecube.com/ygopro-build-materials/libevent-2.0.22-stable.tar.gz | tar zfx -
    - mv libevent-2.0.22-stable event ; cp -rf event/WIN32-Code/* event/include
    # irrlicht
    - wget https://cdn01.moecube.com/ygopro-build-materials/irrlicht-1.8.4.zip
    - 7z x -y irrlicht-1.8.4.zip
    - mv premake/irrlicht .
    - mv irrlicht-1.8.4/source/Irrlicht irrlicht/src
    - mv irrlicht-1.8.4/include irrlicht/include
  artifacts:
    paths:
      - premake5.exe
      - event
      - irrlicht

._exec_build:
  stage: build
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - bin/
      - obj/

exec_windows:
  extends: ._exec_build
  tags:
    - vs
  dependencies:
    - mat_common
    - mat_irrklang
    - mat_windows
  variables:
    irrklang_pro: '1'
    USE_IRRKLANG: "1"
  script:
    - git submodule update --init
    - bash -c 'cp -rf premake/* .'
    - cmd /C "patch -p0 < irrlicht\irrlicht.patch"
    - '.\premake5.exe vs2019'
    - cmd /c '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\msbuild.exe" build\ygo.sln /m /p:Configuration=Release'
    - copy bin\release\ygopro.exe .
  artifacts:
    paths:
      - ygopro.exe

exec_linux:
  extends: ._exec_build
  tags:
    - linux
  variables:
    YGOPRO_BUILD_ALL: '1'
    USE_IRRKLANG: "1"
  dependencies:
    - mat_common
    - mat_irrklang
    - mat_linux
  script:
    - apt update; apt -y install git build-essential libgl1-mesa-dev libglu-dev libxxf86vm-dev
    - git submodule update --init
    - mkdir lib
    - cp -rf irrklang/bin/linux-gcc-64/libIrrKlang.so ./lib/
    - env YGOPRO_LIBEVENT_STATIC_PATH=$PWD/libevent-stable ./premake5 gmake
    - cd build
    - make config=release -j$(nproc)
    - cd ..
    - mv bin/release/ygopro .
    - strip ygopro
  artifacts:
    paths:
      - ygopro
      - lib

._exec_macos_platform:
  extends: ._exec_build
  tags:
    - macos
  script:
    - ./.ci/exec-macos-platform.sh
  artifacts:
    paths:
      - ygopro-platforms

exec_macos_platform_x86:
  extends: ._exec_macos_platform
  dependencies:
    - mat_irrklang
    - mat_macos
    - mat_common
    - mat_macos_platform_x86
  variables:
    TARGET_ARCH: x86
    USE_IRRKLANG: "1"
      
exec_macos_platform_m1:
  extends: ._exec_macos_platform
  dependencies:
    - mat_macos
    - mat_common
    - mat_macos_platform_m1
  variables:
    TARGET_ARCH: m1
    YGOPRO_TARGET_ARM: '1'

exec_macos:
  stage: combine
  tags:
    - macos
  dependencies:
    - exec_macos_platform_x86
    - exec_macos_platform_m1
    - mat_macos_irrklang_patched
  script:
    - mkdir -p ygopro.app/Contents/MacOS ygopro.app/Contents/Frameworks;
    - lipo -create -output ygopro.app/Contents/MacOS/ygopro ygopro-platforms/ygopro-platform-x86 ygopro-platforms/ygopro-platform-m1;
    # do some special things for irrklang
    - mv ./libirrklang-patched.dylib ygopro.app/Contents/Frameworks/libirrklang.dylib 
    #- install_name_tool -change /usr/local/lib/libirrklang.dylib @executable_path/../Frameworks/libirrklang.dylib ygopro.app/Contents/MacOS/ygopro
    #- dylibbundler -x ygopro.app/Contents/MacOS/ygopro -b -d ygopro.app/Contents/Frameworks/ -p @executable_path/../Frameworks/ -cd -i @executable_path/../Frameworks;
    #- strip ygopro.app/Contents/MacOS/ygopro;
    - mkdir ygopro.app/Contents/Resources;
    - mv premake/gframe/ygopro.icns ygopro.app/Contents/Resources/Icon.icns;
    - defaults write "$PWD/ygopro.app/Contents/Info.plist" "CFBundleIconFile" "Icon.icns";
    - defaults write "$PWD/ygopro.app/Contents/Info.plist" "CFBundleIdentifier" "moe.mycard.ygopro";

  artifacts:
    paths:
      - ygopro.app

#exec_macos_sign:
#  stage: sign
#  tags:
#    - macos
#  dependencies:
#    - exec_macos
#  script: ./.ci/sign-macos.sh
#  artifacts:
#    paths:
#      - ygopro.app
#  only:
#    - tags
#    - master

assets:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install tar wget git
    # starter pack
    - wget -O - https://code.mycard.moe/mycard/ygopro-starter-pack/-/archive/master/ygopro-starter-pack-master.tar.gz | tar zfx -
    - mv ygopro-starter-pack-master/* .
    # sound
    - wget -O - https://code.mycard.moe/mycard/ygopro-sounds/-/archive/master/ygopro-sounds-master.tar.gz | tar zfx -
    - mv ygopro-sounds-master/sound/* sound
    # fonts
    - mkdir fonts
    - cd fonts
    - wget -O - https://cdn01.moecube.com/ygopro-fonts.tar.gz | tar zfx -
    - cd ..
    # locales
    - git clone --depth=1 https://code.mycard.moe/nanahira/ygopro-database
    - mv ygopro-database/locales .
    # system_user.conf
    - cp system.conf system_user.conf
  artifacts:
    paths:
      - deck
      - single
      - sound
      - fonts
      - locales
      - system_user.conf
  only:
    - tags
    - master

assets_nonwindows:
  stage: prepare
  tags:
    - linux
  script:
    - apt update; apt -y install tar wget
    - wget -O - https://cdn01.moecube.com/windbot/windbot.tar.gz | tar zfx -
  artifacts:
    paths:
      - bot.conf
      - windbot
      - bot
  only:
    - tags
    - master

assets_windows:
  stage: prepare
  tags:
    - linux
  script:
    - wget https://cdn01.moecube.com/windbot/WindBot.7z
    - 7z x -y WindBot.7z
    - aws s3 --endpoint=https://minio.mycard.moe:9000 sync s3://mycard/koishipro/contents/update-koishipro/ ./update-koishipro
    - rm -rf update-koishipro/.git || true
  artifacts:
    paths:
      - bot.conf
      - WindBot
      - Bot.exe
      - update-koishipro
  only:
    - tags
    - master

._locale_zh-CN:
  variables:
    TARGET_LOCALE: zh-CN

._locale_en-US:
  variables:
    TARGET_LOCALE: en-US

._assets_locale:
  stage: build
  tags:
    - linux
  script: ./.ci/assets-locale.sh
  artifacts:
    paths:
      - pics
      - cards.cdb
      - strings.conf
      - bot.conf
  only:
    - tags
    - master

assets_zh-CN:
  extends: 
    - ._assets_locale
    - ._locale_zh-CN

assets_en-US:
  extends: 
    - ._assets_locale
    - ._locale_en-US

._pack:
  stage: pack
  tags:
    - linux
  artifacts:
    paths:
      - dist
  only:
    - tags
    - master

._pack_script_windows_non7z:
  extends: ._pack
  script: ./.ci/pack-windows.sh

._pack_script_windows_7z:
  extends: ._pack
  script: ./.ci/pack-windows-7z.sh

._pack_script_linux:
  extends: ._pack
  script: ./.ci/pack-linux.sh

._pack_script_macos:
  extends: ._pack
  script: ./.ci/pack-macos.sh

._pack_assets_windows_zh-CN:
  extends: ._pack
  dependencies:
    - assets
    - assets_windows
    - exec_windows
    - assets_zh-CN

._pack_assets_windows_en-US:
  extends: ._pack
  dependencies:
    - assets
    - assets_windows
    - exec_windows
    - assets_en-US

._pack_assets_linux_zh-CN:
  extends: ._pack
  dependencies:
    - assets
    - assets_nonwindows
    - exec_linux
    - assets_zh-CN

._pack_assets_linux_en-US:
  extends: ._pack
  dependencies:
    - assets
    - assets_nonwindows
    - exec_linux
    - assets_en-US

._pack_assets_macos_zh-CN:
  extends: ._pack
  dependencies:
    - assets
    - assets_nonwindows
    - exec_macos
    - assets_zh-CN

._pack_assets_macos_en-US:
  extends: ._pack
  dependencies:
    - assets
    - assets_nonwindows
    - exec_macos
    - assets_en-US

._pack_format_gz:
  extends: ._pack
  variables:
    ARCHIVE_SUFFIX: gz

._pack_format_zst:
  extends: ._pack
  variables:
    ARCHIVE_SUFFIX: zst

pack_windows_zh-CN_7z:
  extends:
    - ._pack_assets_windows_zh-CN
    - ._pack_script_windows_7z
    - ._locale_zh-CN

pack_windows_zh-CN_gz:
  extends:
    - ._pack_assets_windows_zh-CN
    - ._pack_script_windows_non7z
    - ._pack_format_gz
    - ._locale_zh-CN

pack_windows_zh-CN_zst:
  extends:
    - ._pack_assets_windows_zh-CN
    - ._pack_script_windows_non7z
    - ._pack_format_zst
    - ._locale_zh-CN

pack_linux_zh-CN_gz:
  extends:
    - ._pack_assets_linux_zh-CN
    - ._pack_script_linux
    - ._pack_format_gz
    - ._locale_zh-CN

pack_linux_zh-CN_zst:
  extends:
    - ._pack_assets_linux_zh-CN
    - ._pack_script_linux
    - ._pack_format_zst
    - ._locale_zh-CN


pack_macos_zh-CN_gz:
  extends:
    - ._pack_assets_macos_zh-CN
    - ._pack_script_macos
    - ._pack_format_gz
    - ._locale_zh-CN

pack_macos_zh-CN_zst:
  extends:
    - ._pack_assets_macos_zh-CN
    - ._pack_script_macos
    - ._pack_format_zst
    - ._locale_zh-CN

pack_windows_en-US_7z:
  extends:
    - ._pack_assets_windows_en-US
    - ._pack_script_windows_7z
    - ._locale_en-US

pack_windows_en-US_gz:
  extends:
    - ._pack_assets_windows_en-US
    - ._pack_script_windows_non7z
    - ._pack_format_gz
    - ._locale_en-US

pack_windows_en-US_zst:
  extends:
    - ._pack_assets_windows_en-US
    - ._pack_script_windows_non7z
    - ._pack_format_zst
    - ._locale_en-US

pack_linux_en-US_gz:
  extends:
    - ._pack_assets_linux_en-US
    - ._pack_script_linux
    - ._pack_format_gz
    - ._locale_en-US

pack_linux_en-US_zst:
  extends:
    - ._pack_assets_linux_en-US
    - ._pack_script_linux
    - ._pack_format_zst
    - ._locale_en-US

pack_macos_en-US_gz:
  extends:
    - ._pack_assets_macos_en-US
    - ._pack_script_macos
    - ._pack_format_gz
    - ._locale_en-US

pack_macos_en-US_zst:
  extends:
    - ._pack_assets_macos_en-US
    - ._pack_script_macos
    - ._pack_format_zst
    - ._locale_en-US

upload_contents:
  stage: deploy
  dependencies:
    - pack_windows_zh-CN_7z
  tags: 
    - linux
  script:
    - 7z x -y -ocontents dist/KoishiPro-$CI_COMMIT_REF_NAME-win32-zh-CN.7z
    - cd contents/update-koishipro
    - chmod +x *.sh
    - mono update.exe -ci
    - sed -i "/git/d" filelist.txt
    - cd ../..
    - aws s3 --endpoint=https://minio.mycard.moe:9000 sync --delete contents/ s3://mycard/koishipro/contents/
  only:
    - master

upload_to_minio:
  stage: deploy
  dependencies:
    - pack_windows_zh-CN_7z
    - pack_windows_zh-CN_gz
    - pack_windows_zh-CN_zst
    - pack_linux_zh-CN_gz
    - pack_linux_zh-CN_zst
    - pack_macos_zh-CN_gz
    - pack_macos_zh-CN_zst
    - pack_windows_en-US_7z
    - pack_windows_en-US_gz
    - pack_windows_en-US_zst
    - pack_linux_en-US_gz
    - pack_linux_en-US_zst
    - pack_macos_en-US_gz
    - pack_macos_en-US_zst
  tags: 
    - linux
  script:
    - aws s3 --endpoint=https://minio.mycard.moe:9000 sync dist/ s3://mycard/koishipro/archive
  only:
    - tags
    - master

upload_mycard:
  stage: deploy
  dependencies:
    - pack_windows_zh-CN_zst
    - pack_linux_zh-CN_zst
    - pack_macos_zh-CN_zst
    - pack_windows_en-US_zst
    - pack_linux_en-US_zst
    - pack_macos_en-US_zst
  tags: 
    - linux
  variables:
    appVersion: $CI_COMMIT_TAG
  script: ./.ci/upload-packager.sh
  only:
    - tags
